openapi: 3.0.3
info:
  title: Restauration API
  description: API de restauration
  version: 1.0.0
host: localhost:3000
basePath: /
servers: [{ url: "/" }]
schemes:
  - http
paths:
  /login:
    post:
      summary: Login
      description: Récupérer un access token pour utiliser les routes protégées
      operationId: login
      tags:
        - users
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/body/auth/login"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                accessToken: string
  /insertUser:
    post:
      summary: Créer un nouvel utilisateur
      description: Créer un nouvel utilisateur
      operationId: insertUser
      tags:
        - users
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/body/auth/insertUser"
      responses:
        "200":
          description: Création réussie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /aliments:
    get:
      tags:
        - aliments
      summary: Récupérer tout les aliments
      description: Récupérer tout les aliments
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/body/Aliment/getAliments"
  /getAliment/{id}:
    get:
      tags:
        - aliments
      summary: Récupérer un aliment avec son identifiant
      description: Récupérer un aliment avec son identifiant
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/common/_id"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aliment"
  /insertAliment:
    post:
      security:
        - BearerAuth: [admin]
      tags:
        - aliments
      summary: Insérer un aliment
      description: Insérer un aliment
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/body/Aliment/insertAliment"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aliment"
  /updateAliment/{id}:
    post:
      security:
        - BearerAuth: [admin]
      tags:
        - aliments
      summary: Mettre a jour un aliment
      description: Mettre a jour un aliment
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/common/_id"
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/body/Aliment/updateAliment"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aliment"

  /deleteAliment/{id}:
    post:
      security:
        - BearerAuth: [admin]
      tags:
        - aliments
      summary: Supprimer un aliment
      description: Supprimer un aliment
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/common/_id"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/body/Aliment/deletedAliment"

  /plats:
    get:
      tags:
        - plats
      summary: Récupérer tout les plats
      description: Récupérer tout les plats
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/body/Plat/getPlats"
  /getPlat/{id}:
    get:
      tags:
        - plats
      summary: Récupérer un plat avec son identifiant
      description: Récupérer un plat avec son identifiant
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/common/_id"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plat"
  /insertPlat:
    post:
      security:
        - BearerAuth: [admin]
      tags:
        - plats
      summary: Insérer un plat
      description: Insérer un plat
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/body/Plat/insertPlat"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plat"
  /updatePlat/{id}:
    post:
      security:
        - BearerAuth: [admin]
      tags:
        - plats
      summary: Mettre a jour un plat
      description: Mettre a jour un plat
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/common/_id"
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/body/Plat/updatePlat"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plat"

  /deletePlat/{id}:
    post:
      security:
        - BearerAuth: [admin]
      tags:
        - plats
      summary: Supprimer un plat
      description: Supprimer un plat
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/common/_id"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/body/Plat/deletedPlat"


components:
  common:
    _id:
      type: string
      length: 24
      example: 63664c4d0637500420f16b07
    createdAt:
      type: string
      format: date-time
      example: "2022-11-09T08:48:01.453+00:00"
    updatedAt:
      type: string
      format: date-time
      example: "2022-11-09T08:50:04.133+00:00"

  body:
    auth:
      login:
        type: object
        properties:
          email:
            type: string
            format: email
            example: "test@test.fr"
          mdp:
            type: string
            format: password
            minLength: 8
            example: "aaaaaaaaa"
      insertUser:
        type: object
        properties:
          nom:
            type: string
            example: "nomUtilisateur"
          mdp:
            type: string
            minLength: 8
            example: "aaaaaaaaaa"
          email:
            type: string
            format: email
            example: "test@test.fr"
    user:
      createUser:
        properties:
          name:
            $ref: "#/components/schemas/User/properties/name"
          email:
            $ref: "#/components/schemas/User/properties/email"
          password:
            $ref: "#/components/schemas/User/properties/password"
          role:
            $ref: "#/components/schemas/User/properties/role"
      updateUser:
        properties:
          name:
            $ref: "#/components/schemas/User/properties/name"
            required: false
          email:
            $ref: "#/components/schemas/User/properties/email"
            required: false
          password:
            $ref: "#/components/schemas/User/properties/password"
            required: false
          confirmPassword:
            $ref: "#/components/schemas/User/properties/password"
            required: false
    Plat:
      insertPlat:
        properties:
          nom:
            $ref: "#/components/schemas/Plat/properties/nom"
          type:
            $ref: "#/components/schemas/Plat/properties/type"
          aliments:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/Aliment'
                - $ref: '#/components/schemas/Aliment'
          prix:
            $ref: "#/components/schemas/Plat/properties/prix"
      updatePlat:
        properties:
          nom:
            $ref: "#/components/schemas/Plat/properties/nom"
          type:
            $ref: "#/components/schemas/Plat/properties/type"
          aliments:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/Aliment'
                - $ref: '#/components/schemas/Aliment'
          prix:
            $ref: "#/components/schemas/Plat/properties/prix"
      deletedPlat:
        properties:
          acknowledge:
            type: string
            example: "true"
          deletedCount:
            type: number
            example: 1
      getPlats:
        properties:
          plats:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/Plat'
                - $ref: '#/components/schemas/Plat'
    Aliment:
      insertAliment:
        properties:
          nom:
            $ref: "#/components/schemas/Aliment/properties/name"
          type:
            $ref: "#/components/schemas/Aliment/properties/description"
          stock:
            $ref: "#/components/schemas/Aliment/properties/stock"
      updateAliment:
        properties:
          nom:
            $ref: "#/components/schemas/Aliment/properties/name"
          type:
            $ref: "#/components/schemas/Aliment/properties/description"
          stock:
            $ref: "#/components/schemas/Aliment/properties/stock"
      getAliments:
        properties:
          aliments:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/Aliment'
                - $ref: '#/components/schemas/Aliment'
      deletedAliment:
        properties:
          acknowledge:
            type: string
            example: "true"
          deletedCount:
            type: number
            example: 1

  schemas:
    User:
      properties:
        _id:
          $ref: "#/components/common/_id"
        nom:
          type: string
        email:
          type: string
          format: email
        mdp:
          type: string
          format: password
          minLength: 8
          select: false
    Plat:
      properties:
          _id:
            $ref: "#/components/common/_id"
          item:
            $ref: "#/components/common/_id"
          nom:
            type: string
          type:
            type: string
          prix:
            type: number
            minimum: 1
          aliments:
            type: array
            items:
              - $ref: '#/components/schemas/Aliment'
          total:
            type: number
          createdAt:
            $ref: "#/components/common/createdAt"
    Aliment:
      properties:
        _id:
          $ref: "#/components/common/_id"
        nom:
          type: string
        type:
          type: string
        stock:
          type: number
        date:
          $ref: "#/components/common/createdAt"
  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
